python2.2加入了yield关键字，这个关键字用于构建生成器

所有的生成器都是迭代器，因为生成器完全实现了迭代器的接口

只有python函数的定义体中有yield关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。




所有的集合都可以迭代

可迭代的 Iterable 实现方法 __iter__

迭代器   Iterator 实现方法 __next__ __iter__

可迭代的对象一定不能是自身的迭代器。也就是说，可迭代的对象必须实现__iter__，但不能实现__next__.

另一方面，迭代器应该一直可以迭代。迭代器的__iter__方法应该返回自身。



从句法上看，协程与生成器类似，都是定义体中包含yield关键字的函数。可是，在协程中，yield通常出现在表达式的右边（例如:datum = yield），可以产出值，也可以不产出

————如果yield关键字后面没有表达式，那么生成器产生None。协程可能会从调用方接受数据，不过调用方把数据给协程使用的是.send(datum)方法，而不是next（...）函数。

通常，调用方会把值推送给协程。


从根本上把yield视作控制流程的方式，这样就好理解协程了。
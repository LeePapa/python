# -*- coding: utf-8 -*-
# Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。

# 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。
#
# 对于本题,前提只有 一次 1阶或者2阶的跳法。
#
# a.如果两种跳法，1阶或者2阶，那么假定第一次跳的是一阶，那么剩下的是n-1个台阶，跳法是f(n-1);
#
# b.假定第一次跳的是2阶，那么剩下的是n-2个台阶，跳法是f(n-2)
#
# c.由a\b假设可以得出总跳法为: f(n) = f(n-1) + f(n-2)
#
# d.然后通过实际的情况可以得出：只有一阶的时候 f(1) = 1 ,只有两阶的时候可以有 f(2) = 2
#
# e.可以发现最终得出的是一个斐波那契数列：
#
#
# 关于本题，前提是n个台阶会有一次n阶的跳法。分析如下:
#
# f(1) = 1
#
# f(2) = f(2 - 1) + f(2 - 2) // f(2 - 2)
# 表示2阶一次跳2阶的次数。
#
# f(3) = f(3 - 1) + f(3 - 2) + f(3 - 3)
#
# ...
#
# f(n) = f(n - 1) + f(n - 2) + f(n - 3) + ... + f(n - (n - 1)) + f(n - n)
#
# 说明：
#
# 1）这里的f(n)
# 代表的是n个台阶有一次1, 2, ...
# n阶的
# 跳法数。
#
# 2）n = 1
# 时，只有1种跳法，f(1) = 1
#
# 3) n = 2
# 时，会有两个跳得方式，一次1阶或者2阶，这回归到了问题（1） ，f(2) = f(2 - 1) + f(2 - 2)
#
# 4) n = 3
# 时，会有三种跳得方式，1
# 阶、2
# 阶、3
# 阶，
#
# 那么就是第一次跳出1阶后面剩下：f(3 - 1);
# 第一次跳出2阶，剩下f(3 - 2)；第一次3阶，那么剩下f(3 - 3)
#
# 因此结论是f(3) = f(3 - 1) + f(3 - 2) + f(3 - 3)
#
# 5) n = n时，会有n中跳的方式，1
# 阶、2
# 阶...n阶，得出结论：
#
# f(n) = f(n - 1) + f(n - 2) + ... + f(n - (n - 1)) + f(n - n) = > f(0) + f(1) + f(2) + f(3) + ... + f(n - 1)

def jumpFloorII(max):
    list = []
    if max <= 39:
        n, a, b, s = 0, 0, 1, 0
        while n < max:
            # a = b
            # b = a + b
            a, b = b, a + b  # 同时赋值
            list.append(a)
            s = s + list[-1]
            n = n + 1
        return s

print(jumpFloorII(5))

